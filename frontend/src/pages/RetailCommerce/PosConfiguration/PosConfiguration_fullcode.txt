"use client"

import { useState, useEffect } from "react"
import {
  Box,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TextField,
  IconButton,
  Button,
  Checkbox,
  Popover,
  MenuItem,
  InputAdornment,
  Tooltip,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  FormControl,
  InputLabel,
  Select,
  ListItemIcon,
  CircularProgress,
  Grid,
  Card,
  CardContent,
  DialogContentText,
  Snackbar,
  Alert,
} from "@mui/material"
import { useTheme } from "@mui/material/styles"
import {
  Add,
  Delete,
  Search,
  Edit,
  FileDownload,
  Print,
  CheckCircle,
  Cancel,
  MoreVert,
  Refresh,
  Visibility,
  VisibilityOff,
  ContentCopy,
} from "@mui/icons-material"
import { DatePicker } from "@mui/x-date-pickers/DatePicker"
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider"
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns"
import MainContentWrapper from "./MainContentWrapper"
import {
  getAllPosConfigs,
  createPosConfig,
  updatePosConfig,
  formatPosConfigForBackend,
  formatPosConfigForFrontend,
} from "./utils/posConfigService"

const PosConfiguration = ({ open = true }) => {
  const theme = useTheme()
  const [posData, setPosData] = useState([])
  const [selected, setSelected] = useState([])
  const [optionsAnchorEl, setOptionsAnchorEl] = useState(null)
  const [filterText, setFilterText] = useState("")
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)
  const [editDialogOpen, setEditDialogOpen] = useState(false)
  const [newDialogOpen, setNewDialogOpen] = useState(false)
  const [currentPos, setCurrentPos] = useState(null)
  const [snackbar, setSnackbar] = useState({ open: false, message: "", severity: "success" })
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [visiblePasswords, setVisiblePasswords] = useState({})

  // Fetch POS configurations on component mount
  useEffect(() => {
    fetchPosConfigurations()
  }, [])

  // Fetch POS configurations from the backend
  const fetchPosConfigurations = async () => {
    try {
      setLoading(true)
      setError(null)
      const data = await getAllPosConfigs()
      // Transform backend data to frontend format
      const formattedData = data.map((item) => formatPosConfigForFrontend(item))
      setPosData(formattedData)
    } catch (err) {
      console.error("Failed to fetch POS configurations:", err)
      setError("Failed to load POS configurations. Please try again.")
      setSnackbar({
        open: true,
        message: "Failed to load POS configurations",
        severity: "error",
      })
    } finally {
      setLoading(false)
    }
  }

  // Filter data based on search text
  const filteredData = posData.filter(
    (row) =>
      row.id.toLowerCase().includes(filterText.toLowerCase()) ||
      row.posId.toLowerCase().includes(filterText.toLowerCase()) ||
      row.authorityType.toLowerCase().includes(filterText.toLowerCase()) ||
      row.status.toLowerCase().includes(filterText.toLowerCase()),
  )

  // Handle row selection
  const handleSelectRow = (id) => {
    const selectedIndex = selected.indexOf(id)
    let newSelected = []

    if (selectedIndex === -1) {
      newSelected = [...selected, id]
    } else {
      newSelected = selected.filter((item) => item !== id)
    }

    setSelected(newSelected)
  }

  // Handle select all
  const handleSelectAll = (event) => {
    if (event.target.checked) {
      const newSelected = filteredData.map((row) => row.id)
      setSelected(newSelected)
      return
    }
    setSelected([])
  }

  // Check if row is selected
  const isSelected = (id) => selected.indexOf(id) !== -1

  // Options menu handlers
  const handleOptionsClick = (event) => {
    setOptionsAnchorEl(event.currentTarget)
  }

  const handleOptionsClose = () => {
    setOptionsAnchorEl(null)
  }

  // Toggle password visibility
  const togglePasswordVisibility = (id) => {
    setVisiblePasswords((prev) => ({
      ...prev,
      [id]: !prev[id],
    }))
  }

  // Copy password to clipboard
  const copyPasswordToClipboard = (password, id) => {
    if (!password) return

    navigator.clipboard.writeText(password).then(
      () => {
        setSnackbar({
          open: true,
          message: "Password copied to clipboard",
          severity: "success",
        })
      },
      (err) => {
        console.error("Could not copy password: ", err)
        setSnackbar({
          open: true,
          message: "Failed to copy password",
          severity: "error",
        })
      },
    )
  }

  // Edit handler
  const handleEdit = () => {
    if (selected.length !== 1) {
      setSnackbar({
        open: true,
        message: "Please select exactly one item to edit",
        severity: "warning",
      })
      return
    }

    const posToEdit = posData.find((pos) => pos.id === selected[0])
    setCurrentPos({ ...posToEdit })
    setEditDialogOpen(true)
  }

  // Save edit changes
  const handleSaveEdit = async () => {
    try {
      setLoading(true)
      // Format data for backend
      const backendData = formatPosConfigForBackend(currentPos)

      // Send update to backend
      await updatePosConfig(currentPos.posId, backendData)

      // Update local state
      setPosData(posData.map((pos) => (pos.id === currentPos.id ? currentPos : pos)))

      setEditDialogOpen(false)
      setSnackbar({
        open: true,
        message: "POS configuration updated successfully",
        severity: "success",
      })

      // Refresh data from backend to ensure consistency
      fetchPosConfigurations()
    } catch (err) {
      console.error("Failed to update POS configuration:", err)
      setSnackbar({
        open: true,
        message: err.response?.data?.error || "Failed to update POS configuration",
        severity: "error",
      })
    } finally {
      setLoading(false)
    }
  }

  // New POS handler
  const handleNew = () => {
    // Generate random 5-digit POS ID
    const randomPosId = Math.floor(10000 + Math.random() * 90000).toString()

    // Generate random 6-digit Registration Number
    const randomRegNumber = Math.floor(100000 + Math.random() * 900000).toString()

    // Set default dates for TimeBound
    const now = new Date()
    const nextYear = new Date()
    nextYear.setFullYear(now.getFullYear() + 1)

    setCurrentPos({
      id: randomRegNumber,
      posId: randomPosId,
      authorityType: "PRA",
      token: "",
      offlineToken: "",
      userName: "", // Optional
      password: "", // Optional
      timeBoundStart: now, // Required by backend
      timeBoundEnd: nextYear, // Required by backend
      status: "ONLINE",
    })
    setNewDialogOpen(true)
  }

  // Save new POS
  const handleSaveNew = async () => {
    try {
      setLoading(true)

      // Format data for backend
      const backendData = formatPosConfigForBackend(currentPos)

      // Ensure status is set to ONLINE for new POS configurations
      if (!backendData.POSStatus) {
        backendData.POSStatus = "ONLINE"
      }

      // Send to backend
      await createPosConfig(backendData)

      setNewDialogOpen(false)
      setSnackbar({
        open: true,
        message: "New POS configuration added successfully",
        severity: "success",
      })

      // Refresh data from backend
      fetchPosConfigurations()
    } catch (err) {
      console.error("Failed to create POS configuration:", err)
      setSnackbar({
        open: true,
        message: err.response?.data?.error || "Failed to create POS configuration",
        severity: "error",
      })
    } finally {
      setLoading(false)
    }
  }

  // Delete handler - Note: Backend doesn't have a delete endpoint, so this is just UI functionality
  const handleDelete = () => {
    if (selected.length === 0) {
      setSnackbar({
        open: true,
        message: "Please select at least one item to delete",
        severity: "warning",
      })
      return
    }
    setDeleteDialogOpen(true)
  }

  // Confirm delete - This would need a backend endpoint to be fully implemented
  const handleConfirmDelete = () => {
    // This is just UI functionality since there's no delete endpoint
    setPosData(posData.filter((pos) => !selected.includes(pos.id)))
    setSelected([])
    setDeleteDialogOpen(false)
    setSnackbar({
      open: true,
      message: `${selected.length} item(s) deleted successfully`,
      severity: "success",
    })
  }

  // Export data
  const handleExport = () => {
    // Create CSV content
    const headers = ["Register Number", "POS ID", "Authority Type", "Status", "Username", "Password", "Time Bound"]
    const csvContent = [
      headers.join(","),
      ...filteredData.map((row) =>
        [row.id, row.posId, row.authorityType, row.status, row.userName, row.password, row.timeBound].join(","),
      ),
    ].join("\n")

    // Create download link
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" })
    const url = URL.createObjectURL(blob)
    const link = document.createElement("a")
    link.setAttribute("href", url)
    link.setAttribute("download", "pos_configurations.csv")
    link.style.visibility = "hidden"
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)

    setSnackbar({
      open: true,
      message: "Data exported successfully",
      severity: "success",
    })
    handleOptionsClose()
  }

  // Print data
  const handlePrint = () => {
    window.print()
    handleOptionsClose()
  }

  // Refresh data
  const handleRefresh = () => {
    fetchPosConfigurations()
    handleOptionsClose()
  }

  // Close snackbar
  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false })
  }

  return (
    <MainContentWrapper open={open}>
      <Card
        elevation={0}
        sx={{
          borderRadius: 2,
          overflow: "hidden",
          width: "100%",
          maxWidth: "100%",
          border: `1px solid ${theme.palette.divider}`,
          bgcolor: theme.palette.background.paper,
        }}
      >
        {/* Navigation Bar */}
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            p: 1.5,
            borderBottom: `1px solid ${theme.palette.divider}`,
            bgcolor: theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.05)" : "rgba(0, 0, 0, 0.02)",
          }}
        >
          <Tooltip title="Edit selected POS">
            <Button
              variant="contained"
              size="small"
              startIcon={<Edit fontSize="small" />}
              onClick={handleEdit}
              disabled={loading}
              sx={{
                bgcolor: selected.length === 1 ? theme.palette.primary.main : theme.palette.action.disabledBackground,
                color: selected.length === 1 ? theme.palette.primary.contrastText : theme.palette.text.disabled,
                textTransform: "none",
                fontWeight: 500,
                boxShadow: "none",
                "&:hover": {
                  bgcolor: selected.length === 1 ? theme.palette.primary.dark : theme.palette.action.hover,
                  boxShadow: "0 1px 2px rgba(0,0,0,0.1)",
                },
              }}
            >
              Edit
            </Button>
          </Tooltip>

          <Tooltip title="Add new POS">
            <Button
              variant="contained"
              size="small"
              startIcon={<Add fontSize="small" />}
              onClick={handleNew}
              disabled={loading}
              sx={{
                ml: 1,
                bgcolor: theme.palette.success.main,
                color: theme.palette.success.contrastText,
                textTransform: "none",
                fontWeight: 500,
                boxShadow: "none",
                "&:hover": {
                  bgcolor: theme.palette.success.dark,
                  boxShadow: "0 1px 2px rgba(0,0,0,0.1)",
                },
              }}
            >
              New
            </Button>
          </Tooltip>

          <Tooltip title="Delete selected POS">
            <Button
              variant="contained"
              size="small"
              startIcon={<Delete fontSize="small" />}
              onClick={handleDelete}
              disabled={loading}
              sx={{
                ml: 1,
                bgcolor: selected.length > 0 ? theme.palette.error.main : theme.palette.action.disabledBackground,
                color: selected.length > 0 ? theme.palette.error.contrastText : theme.palette.text.disabled,
                textTransform: "none",
                fontWeight: 500,
                boxShadow: "none",
                "&:hover": {
                  bgcolor: selected.length > 0 ? theme.palette.error.dark : theme.palette.action.hover,
                  boxShadow: "0 1px 2px rgba(0,0,0,0.1)",
                },
              }}
            >
              Delete
            </Button>
          </Tooltip>

          <Tooltip title="More options">
            <IconButton
              size="small"
              onClick={handleOptionsClick}
              disabled={loading}
              sx={{
                ml: 1,
                color: theme.palette.text.secondary,
                "&:hover": {
                  bgcolor: theme.palette.action.hover,
                },
              }}
            >
              <MoreVert fontSize="small" />
            </IconButton>
          </Tooltip>

          <Popover
            open={Boolean(optionsAnchorEl)}
            anchorEl={optionsAnchorEl}
            onClose={handleOptionsClose}
            anchorOrigin={{
              vertical: "bottom",
              horizontal: "left",
            }}
            PaperProps={{
              elevation: 3,
              sx: {
                borderRadius: 1,
                mt: 0.5,
                boxShadow: theme.shadows[3],
                bgcolor: theme.palette.background.paper,
              },
            }}
          >
            <MenuItem onClick={handleRefresh} sx={{ fontSize: "14px" }}>
              <ListItemIcon>
                <Refresh fontSize="small" sx={{ color: theme.palette.text.secondary }} />
              </ListItemIcon>
              Refresh data
            </MenuItem>
            <MenuItem onClick={handleExport} sx={{ fontSize: "14px" }}>
              <ListItemIcon>
                <FileDownload fontSize="small" sx={{ color: theme.palette.text.secondary }} />
              </ListItemIcon>
              Export data
            </MenuItem>
            <MenuItem onClick={handlePrint} sx={{ fontSize: "14px" }}>
              <ListItemIcon>
                <Print fontSize="small" sx={{ color: theme.palette.text.secondary }} />
              </ListItemIcon>
              Print
            </MenuItem>
          </Popover>

          <Box sx={{ flexGrow: 1 }} />

          <TextField
            placeholder="Search..."
            size="small"
            variant="outlined"
            value={filterText}
            onChange={(e) => setFilterText(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <Search fontSize="small" sx={{ color: theme.palette.text.secondary }} />
                </InputAdornment>
              ),
              sx: {
                fontSize: "14px",
                height: "36px",
                "& .MuiOutlinedInput-notchedOutline": {
                  borderColor: theme.palette.divider,
                  borderRadius: "8px",
                },
                "&:hover .MuiOutlinedInput-notchedOutline": {
                  borderColor: theme.palette.mode === "dark" ? theme.palette.grey[700] : theme.palette.grey[400],
                },
                "&.Mui-focused .MuiOutlinedInput-notchedOutline": {
                  borderColor: theme.palette.primary.main,
                  borderWidth: "1px",
                },
              },
            }}
            sx={{
              width: "220px",
              "& .MuiInputBase-root": {
                height: "36px",
              },
            }}
          />
        </Box>

        {/* Title */}
        <Box sx={{ p: 2.5, pb: 1.5, bgcolor: theme.palette.background.paper }}>
          <Typography
            variant="body2"
            sx={{
              fontSize: "13px",
              color: theme.palette.text.secondary,
              mb: 0.5,
              fontWeight: 500,
            }}
          >
            POS registeration
          </Typography>
          <Box sx={{ display: "flex", alignItems: "center" }}>
            <Typography
              variant="h6"
              component="h1"
              sx={{
                fontWeight: 600,
                fontSize: "18px",
                color: theme.palette.text.primary,
              }}
            >
              Standard view
            </Typography>
          </Box>
        </Box>

        {/* Table */}
        <TableContainer
          sx={{
            flexGrow: 1,
            borderTop: `1px solid ${theme.palette.divider}`,
            borderRadius: 0,
            maxHeight: "calc(100vh - 250px)",
            height: "670px", // Fixed height to ensure scrolling
            position: "relative",
            overflow: "auto", // Ensure scrolling is enabled
          }}
        >
          {loading && (
            <Box
              sx={{
                position: "absolute",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                backgroundColor: theme.palette.mode === "dark" ? "rgba(0, 0, 0, 0.7)" : "rgba(255, 255, 255, 0.7)",
                zIndex: 10,
              }}
            >
              <CircularProgress />
            </Box>
          )}

          {error && (
            <Box
              sx={{
                p: 3,
                textAlign: "center",
                color: theme.palette.error.main,
              }}
            >
              <Typography variant="body1">{error}</Typography>
              <Button
                variant="outlined"
                color="primary"
                onClick={fetchPosConfigurations}
                sx={{ mt: 2 }}
                startIcon={<Refresh />}
              >
                Retry
              </Button>
            </Box>
          )}

          <Table size="small" aria-label="POS configuration table" stickyHeader>
            <TableHead>
              <TableRow
                sx={{
                  "& th": {
                    fontWeight: 600,
                    fontSize: "13px",
                    color: theme.palette.text.primary,
                    bgcolor: theme.palette.mode === "dark" ? theme.palette.grey[900] : theme.palette.grey[50],
                    borderBottom: `1px solid ${theme.palette.divider}`,
                    py: 1.5,
                    position: "sticky",
                    top: 0,
                    zIndex: 2,
                  },
                }}
              >
                <TableCell padding="checkbox" sx={{ pl: 2, boxShadow: `0 1px 0 ${theme.palette.divider}` }}>
                  <Checkbox
                    color="primary"
                    indeterminate={selected.length > 0 && selected.length < filteredData.length}
                    checked={filteredData.length > 0 && selected.length === filteredData.length}
                    onChange={handleSelectAll}
                    inputProps={{
                      "aria-label": "select all POS",
                    }}
                    size="small"
                    sx={{
                      color: theme.palette.text.secondary,
                      "&.Mui-checked": {
                        color: theme.palette.primary.main,
                      },
                      "&.MuiCheckbox-indeterminate": {
                        color: theme.palette.primary.main,
                      },
                    }}
                  />
                </TableCell>
                <TableCell sx={{ boxShadow: `0 1px 0 ${theme.palette.divider}` }}>Register number</TableCell>
                <TableCell sx={{ boxShadow: `0 1px 0 ${theme.palette.divider}` }}>POS ID</TableCell>
                <TableCell sx={{ boxShadow: `0 1px 0 ${theme.palette.divider}` }}>Authority Type</TableCell>
                <TableCell sx={{ boxShadow: `0 1px 0 ${theme.palette.divider}` }}>Username</TableCell>
                <TableCell sx={{ boxShadow: `0 1px 0 ${theme.palette.divider}` }}>Password</TableCell>
                <TableCell sx={{ boxShadow: `0 1px 0 ${theme.palette.divider}` }}>Time bound</TableCell>
                <TableCell sx={{ boxShadow: `0 1px 0 ${theme.palette.divider}` }}>Status</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filteredData.length === 0 && !loading && !error ? (
                <TableRow>
                  <TableCell colSpan={8} align="center" sx={{ py: 3 }}>
                    <Typography variant="body2" color="textSecondary">
                      No POS configurations found
                    </Typography>
                  </TableCell>
                </TableRow>
              ) : (
                filteredData.map((row) => {
                  const isItemSelected = isSelected(row.id)
                  const isPasswordVisible = visiblePasswords[row.id] || false

                  return (
                    <TableRow
                      key={row.id}
                      selected={isItemSelected}
                      hover
                      onClick={() => handleSelectRow(row.id)}
                      sx={{
                        "&.Mui-selected": {
                          backgroundColor:
                            theme.palette.mode === "dark" ? "rgba(25, 118, 210, 0.16)" : "rgba(25, 118, 210, 0.08)",
                        },
                        "&.Mui-selected:hover": {
                          backgroundColor:
                            theme.palette.mode === "dark" ? "rgba(25, 118, 210, 0.24)" : "rgba(25, 118, 210, 0.12)",
                        },
                        "&:hover": {
                          backgroundColor: theme.palette.action.hover,
                        },
                        "& td": {
                          fontSize: "13px",
                          color: theme.palette.text.primary,
                          borderBottom: `1px solid ${theme.palette.divider}`,
                          padding: "10px 16px",
                        },
                        cursor: "pointer",
                      }}
                    >
                      <TableCell padding="checkbox" sx={{ pl: 2 }}>
                        <Checkbox
                          color="primary"
                          checked={isItemSelected}
                          size="small"
                          onClick={(event) => event.stopPropagation()}
                          onChange={(event) => {
                            event.stopPropagation()
                            handleSelectRow(row.id)
                          }}
                          sx={{
                            color: theme.palette.text.secondary,
                            "&.Mui-checked": {
                              color: theme.palette.primary.main,
                            },
                          }}
                        />
                      </TableCell>
                      <TableCell sx={{ fontWeight: 500 }}>{row.id}</TableCell>
                      <TableCell>{row.posId}</TableCell>
                      <TableCell>
                        <Box
                          sx={{
                            display: "inline-block",
                            px: 1.5,
                            py: 0.5,
                            borderRadius: "4px",
                            fontSize: "12px",
                            fontWeight: 600,
                            letterSpacing: "0.5px",
                            ...(row.authorityType === "PRA" && {
                              bgcolor:
                                theme.palette.mode === "dark" ? "rgba(25, 118, 210, 0.2)" : "rgba(25, 118, 210, 0.1)",
                              color: theme.palette.primary.main,
                            }),
                            ...(row.authorityType === "KPRA" && {
                              bgcolor:
                                theme.palette.mode === "dark" ? "rgba(46, 125, 50, 0.2)" : "rgba(46, 125, 50, 0.1)",
                              color: theme.palette.success.main,
                            }),
                            ...(row.authorityType === "FBR" && {
                              bgcolor:
                                theme.palette.mode === "dark" ? "rgba(237, 108, 2, 0.2)" : "rgba(237, 108, 2, 0.1)",
                              color: theme.palette.warning.main,
                            }),
                          }}
                        >
                          {row.authorityType}
                        </Box>
                      </TableCell>
                      <TableCell>{row.userName || "-"}</TableCell>
                      <TableCell>
                        {row.password ? (
                          <Box sx={{ display: "flex", alignItems: "center" }}>
                            <Tooltip title="Click to copy password">
                              <Typography
                                onClick={(e) => {
                                  e.stopPropagation()
                                  copyPasswordToClipboard(row.password, row.id)
                                }}
                                sx={{
                                  cursor: "pointer",
                                  "&:hover": {
                                    textDecoration: "underline",
                                    color: theme.palette.primary.main,
                                  },
                                  display: "flex",
                                  alignItems: "center",
                                }}
                              >
                                {isPasswordVisible ? row.password : "••••••"}
                                <ContentCopy
                                  fontSize="small"
                                  sx={{ ml: 0.5, fontSize: "14px", color: theme.palette.text.secondary }}
                                />
                              </Typography>
                            </Tooltip>
                            <IconButton
                              size="small"
                              onClick={(e) => {
                                e.stopPropagation()
                                togglePasswordVisibility(row.id)
                              }}
                              sx={{ ml: 1, p: 0.5 }}
                            >
                              {isPasswordVisible ? (
                                <VisibilityOff
                                  fontSize="small"
                                  sx={{ fontSize: "16px", color: theme.palette.text.secondary }}
                                />
                              ) : (
                                <Visibility
                                  fontSize="small"
                                  sx={{ fontSize: "16px", color: theme.palette.text.secondary }}
                                />
                              )}
                            </IconButton>
                          </Box>
                        ) : (
                          "-"
                        )}
                      </TableCell>
                      <TableCell>{row.timeBound}</TableCell>
                      <TableCell>
                        <Box
                          sx={{
                            display: "flex",
                            alignItems: "center",
                            ...(row.status === "ONLINE"
                              ? {
                                  color: theme.palette.success.main,
                                  bgcolor:
                                    theme.palette.mode === "dark" ? "rgba(46, 125, 50, 0.2)" : "rgba(46, 125, 50, 0.1)",
                                  borderRadius: "4px",
                                  px: 1,
                                  py: 0.5,
                                  display: "inline-flex",
                                }
                              : {
                                  color: theme.palette.error.main,
                                  bgcolor:
                                    theme.palette.mode === "dark" ? "rgba(211, 47, 47, 0.2)" : "rgba(211, 47, 47, 0.1)",
                                  borderRadius: "4px",
                                  px: 1,
                                  py: 0.5,
                                  display: "inline-flex",
                                }),
                          }}
                        >
                          {row.status === "ONLINE" ? (
                            <CheckCircle fontSize="small" sx={{ mr: 0.5, fontSize: "14px" }} />
                          ) : (
                            <Cancel fontSize="small" sx={{ mr: 0.5, fontSize: "14px" }} />
                          )}
                          <Typography sx={{ fontSize: "12px", fontWeight: 600, letterSpacing: "0.5px" }}>
                            {row.status}
                          </Typography>
                        </Box>
                      </TableCell>
                    </TableRow>
                  )
                })
              )}
            </TableBody>
          </Table>
        </TableContainer>

        {/* Status bar */}
        <Box
          sx={{
            p: 1.5,
            borderTop: `1px solid ${theme.palette.divider}`,
            display: "flex",
            alignItems: "center",
            bgcolor: theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.05)" : "rgba(0, 0, 0, 0.02)",
          }}
        >
          <Typography variant="body2" sx={{ color: theme.palette.text.secondary, fontSize: "13px", fontWeight: 500 }}>
            {selected.length > 0 ? `${selected.length} item(s) selected` : `${filteredData.length} item(s)`}
          </Typography>
        </Box>
      </Card>

      {/* Edit Dialog */}
      <Dialog
        open={editDialogOpen}
        onClose={() => setEditDialogOpen(false)}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          elevation: 3,
          sx: {
            borderRadius: 2,
            overflow: "hidden",
            bgcolor: theme.palette.background.paper,
          },
        }}
      >
        <DialogTitle
          sx={{
            bgcolor: theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.05)" : "rgba(0, 0, 0, 0.02)",
            borderBottom: `1px solid ${theme.palette.divider}`,
            fontWeight: 600,
            p: 2.5,
          }}
        >
          Edit POS Configuration
        </DialogTitle>
        <DialogContent sx={{ p: 3 }}>
          <Box sx={{ display: "grid", gap: 3 }}>
            <TextField
              label="Register Number"
              value={currentPos?.id || ""}
              disabled
              fullWidth
              variant="filled"
              InputLabelProps={{ shrink: true }}
            />
            <TextField
              label="POS ID"
              value={currentPos?.posId || ""}
              disabled
              fullWidth
              variant="filled"
              InputLabelProps={{ shrink: true }}
            />
            <FormControl fullWidth variant="filled">
              <InputLabel shrink>Authority Type</InputLabel>
              <Select
                value={currentPos?.authorityType || ""}
                onChange={(e) => setCurrentPos({ ...currentPos, authorityType: e.target.value })}
                displayEmpty
              >
                <MenuItem value="PRA">PRA</MenuItem>
                <MenuItem value="KPRA">KPRA</MenuItem>
                <MenuItem value="FBR">FBR</MenuItem>
              </Select>
            </FormControl>
            <TextField
              label="Username"
              value={currentPos?.userName || ""}
              onChange={(e) => setCurrentPos({ ...currentPos, userName: e.target.value })}
              fullWidth
              variant="filled"
              InputLabelProps={{ shrink: true }}
            />
            <TextField
              label="Password"
              type="password"
              value={currentPos?.password || ""}
              onChange={(e) => {
                // Limit to 6 characters
                const value = e.target.value.slice(0, 6)
                setCurrentPos({ ...currentPos, password: value })
              }}
              inputProps={{ maxLength: 6 }}
              fullWidth
              variant="filled"
              InputLabelProps={{ shrink: true }}
              helperText="Maximum 6 characters"
            />
            <LocalizationProvider dateAdapter={AdapterDateFns}>
              <Grid container spacing={2}>
                <Grid item xs={6}>
                  <DatePicker
                    label="Time Bound Start"
                    value={currentPos?.timeBoundStart || null}
                    onChange={(date) => setCurrentPos({ ...currentPos, timeBoundStart: date })}
                    slotProps={{
                      textField: {
                        variant: "filled",
                        fullWidth: true,
                        InputLabelProps: { shrink: true },
                      },
                    }}
                  />
                </Grid>
                <Grid item xs={6}>
                  <DatePicker
                    label="Time Bound End"
                    value={currentPos?.timeBoundEnd || null}
                    onChange={(date) => setCurrentPos({ ...currentPos, timeBoundEnd: date })}
                    slotProps={{
                      textField: {
                        variant: "filled",
                        fullWidth: true,
                        InputLabelProps: { shrink: true },
                      },
                    }}
                  />
                </Grid>
              </Grid>
            </LocalizationProvider>
            <FormControl fullWidth variant="filled">
              <InputLabel shrink>Status</InputLabel>
              <Select
                value={currentPos?.status || ""}
                onChange={(e) => setCurrentPos({ ...currentPos, status: e.target.value })}
                displayEmpty
              >
                <MenuItem value="ONLINE">ONLINE</MenuItem>
                <MenuItem value="OFFLINE">OFFLINE</MenuItem>
              </Select>
            </FormControl>
          </Box>
        </DialogContent>
        <DialogActions sx={{ p: 2.5, borderTop: `1px solid ${theme.palette.divider}` }}>
          <Button
            onClick={() => setEditDialogOpen(false)}
            sx={{
              color: theme.palette.text.secondary,
              fontWeight: 500,
              textTransform: "none",
            }}
          >
            Cancel
          </Button>
          <Button
            onClick={handleSaveEdit}
            variant="contained"
            disabled={loading}
            sx={{
              bgcolor: theme.palette.primary.main,
              fontWeight: 500,
              textTransform: "none",
              boxShadow: "none",
              "&:hover": {
                bgcolor: theme.palette.primary.dark,
                boxShadow: "0 1px 2px rgba(0,0,0,0.1)",
              },
            }}
          >
            {loading ? <CircularProgress size={24} /> : "Save"}
          </Button>
        </DialogActions>
      </Dialog>

      {/* New Dialog */}
      <Dialog
        open={newDialogOpen}
        onClose={() => setNewDialogOpen(false)}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          elevation: 3,
          sx: {
            borderRadius: 2,
            overflow: "hidden",
            bgcolor: theme.palette.background.paper,
          },
        }}
      >
        <DialogTitle
          sx={{
            bgcolor: theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.05)" : "rgba(0, 0, 0, 0.02)",
            borderBottom: `1px solid ${theme.palette.divider}`,
            fontWeight: 600,
            p: 2.5,
          }}
        >
          New POS Configuration
        </DialogTitle>
        <DialogContent sx={{ p: 3 }}>
          <Box sx={{ display: "grid", gap: 3, mt: 1 }}>
            <Card
              variant="outlined"
              sx={{
                bgcolor: theme.palette.mode === "dark" ? "rgba(25, 118, 210, 0.08)" : "#f5f8ff",
                p: 2,
                borderRadius: 2,
                borderColor: theme.palette.mode === "dark" ? "rgba(25, 118, 210, 0.3)" : theme.palette.divider,
              }}
            >
              <CardContent sx={{ p: 0 }}>
                <Typography variant="subtitle2" sx={{ mb: 1, color: theme.palette.primary.main }}>
                  Auto-generated Information
                </Typography>
                <Grid container spacing={2}>
                  <Grid item xs={6}>
                    <TextField
                      label="POS ID"
                      value={currentPos?.posId || ""}
                      fullWidth
                      variant="filled"
                      disabled
                      InputLabelProps={{ shrink: true }}
                      helperText="Automatically generated 5-digit number"
                    />
                  </Grid>
                  <Grid item xs={6}>
                    <TextField
                      label="Registration Number"
                      value={currentPos?.id || ""}
                      fullWidth
                      variant="filled"
                      disabled
                      InputLabelProps={{ shrink: true }}
                      helperText="Automatically generated 6-digit number"
                    />
                  </Grid>
                </Grid>
              </CardContent>
            </Card>

            <FormControl fullWidth variant="filled">
              <InputLabel shrink>Authority Type</InputLabel>
              <Select
                value={currentPos?.authorityType || "PRA"}
                onChange={(e) => setCurrentPos({ ...currentPos, authorityType: e.target.value })}
                displayEmpty
              >
                <MenuItem value="PRA">PRA</MenuItem>
                <MenuItem value="KPRA">KPRA</MenuItem>
                <MenuItem value="FBR">FBR</MenuItem>
              </Select>
            </FormControl>

            <TextField
              label="Username (Optional)"
              value={currentPos?.userName || ""}
              onChange={(e) => setCurrentPos({ ...currentPos, userName: e.target.value })}
              fullWidth
              variant="filled"
              InputLabelProps={{ shrink: true }}
              placeholder="Enter username if needed"
            />

            <TextField
              label="Password (Optional)"
              type="password"
              value={currentPos?.password || ""}
              onChange={(e) => {
                // Limit to 6 characters
                const value = e.target.value.slice(0, 6)
                setCurrentPos({ ...currentPos, password: value })
              }}
              inputProps={{ maxLength: 6 }}
              fullWidth
              variant="filled"
              InputLabelProps={{ shrink: true }}
              placeholder="Enter password if needed"
              helperText="Maximum 6 characters"
            />

            <Typography variant="body2" color="textSecondary">
              Status will be set to ONLINE by default
            </Typography>
          </Box>
        </DialogContent>
        <DialogActions sx={{ p: 2.5, borderTop: `1px solid ${theme.palette.divider}` }}>
          <Button
            onClick={() => setNewDialogOpen(false)}
            sx={{
              color: theme.palette.text.secondary,
              fontWeight: 500,
              textTransform: "none",
            }}
          >
            Cancel
          </Button>
          <Button
            onClick={handleSaveNew}
            variant="contained"
            disabled={loading}
            sx={{
              bgcolor: theme.palette.success.main,
              fontWeight: 500,
              textTransform: "none",
              boxShadow: "none",
              "&:hover": {
                bgcolor: theme.palette.success.dark,
                boxShadow: "0 1px 2px rgba(0,0,0,0.1)",
              },
            }}
          >
            {loading ? <CircularProgress size={24} /> : "Save"}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog
        open={deleteDialogOpen}
        onClose={() => setDeleteDialogOpen(false)}
        PaperProps={{
          elevation: 3,
          sx: {
            borderRadius: 2,
            overflow: "hidden",
            bgcolor: theme.palette.background.paper,
          },
        }}
      >
        <DialogTitle sx={{ fontWeight: 600, p: 2.5 }}>Confirm Delete</DialogTitle>
        <DialogContent sx={{ p: 2.5, pb: 1 }}>
          <DialogContentText sx={{ color: theme.palette.text.secondary }}>
            Are you sure you want to delete {selected.length} selected item(s)? This action cannot be undone.
          </DialogContentText>
        </DialogContent>
        <DialogActions sx={{ p: 2.5, borderTop: `1px solid ${theme.palette.divider}` }}>
          <Button
            onClick={() => setDeleteDialogOpen(false)}
            sx={{
              color: theme.palette.text.secondary,
              fontWeight: 500,
              textTransform: "none",
            }}
          >
            Cancel
          </Button>
          <Button
            onClick={handleConfirmDelete}
            variant="contained"
            disabled={loading}
            sx={{
              bgcolor: theme.palette.error.main,
              fontWeight: 500,
              textTransform: "none",
              boxShadow: "none",
              "&:hover": {
                bgcolor: theme.palette.error.dark,
                boxShadow: "0 1px 2px rgba(0,0,0,0.1)",
              },
            }}
          >
            {loading ? <CircularProgress size={24} /> : "Delete"}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={5000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbar.severity}
          sx={{
            width: "100%",
            boxShadow: theme.shadows[3],
            borderRadius: 2,
            bgcolor:
              theme.palette.mode === "dark"
                ? snackbar.severity === "success"
                  ? "rgba(46, 125, 50, 0.9)"
                  : snackbar.severity === "error"
                    ? "rgba(211, 47, 47, 0.9)"
                    : "rgba(237, 108, 2, 0.9)"
                : undefined,
          }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </MainContentWrapper>
  )
}

export default PosConfiguration
